name: build-and-test

on:
  workflow_call:
    inputs:
      publish:
        description: 'Publish artifacts after build'
        required: false
        default: false
        type: boolean
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
      SONAR_PROJECT_KEY:
        required: true
      SONAR_ORG:
        required: true

  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish artifacts after build'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    env:
      PUBLISH_ARTIFACT: "oweme-api"
      SOLUTION_PATH: "./OweMe.Api.sln"
      API_PROJECT_PATH: "./api/src/OweMe.Api"
      PUBLISH_DIR: "./publish"
      CACHE_DIR: "$HOME/.sonar"
      JDK_VERSION: "17"
      COVERAGE_FILE: "dotCover.Output.html"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for SonarCloud analysis and Nbgv versioning

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}

      - name: Cache JDK ${{ env.JDK_VERSION }}
        uses: actions/cache@v4
        id: cache-jdk
        with:
          path: |
            ~/.sdkman/candidates/java/17.0.*/zulu
          key: ${{ runner.os }}-jdk-17-zulu

      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v4
        if: steps.cache-jdk.outputs.cache-hit != 'true'
        with:
          java-version: '${{ env.JDK_VERSION }}'
          distribution: 'zulu'
          cache: 'gradle'

      # Cache SonarQube Cloud packages and scanner together
      - name: Cache SonarQube Cloud tools
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CACHE_DIR }}/cache
            ${{ env.CACHE_DIR }}/scanner
          key: ${{ runner.os }}-sonar-tools
          restore-keys: ${{ runner.os }}-sonar-tools

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonarqube-cloud-tools.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.CACHE_DIR }}/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ${{ env.CACHE_DIR }}/scanner

      - name: Install dotcover
        run: dotnet tool install JetBrains.dotCover.CommandLineTools --create-manifest-if-needed

      - name: Setup docker
        uses: docker/setup-buildx-action@v3

      - uses: dotnet/nbgv@master
        id: nbgv

      - name: Get version
        run: echo "${{ steps.nbgv.outputs.SemVer2 }}"

      - name: SonarQube Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        run: |
          scannerPath="$CACHE_DIR/scanner/dotnet-sonarscanner"
          "$scannerPath" begin /k:"$SONAR_PROJECT_KEY" \
            /o:"$SONAR_ORG" \
            /d:sonar.token="$SONAR_TOKEN" \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /d:sonar.cs.dotcover.reportsPaths="${{ env.COVERAGE_FILE }}" \
            /d:sonar.scanner.scanAll=false \
            /d:sonar.qualitygate.wait=true \
            /d:sonar.qualitygate.timeout=300

      - name: Dotnet restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test with coverage
        run: |
          dotCover cover-dotnet \
            --reportType=HTML \
            --AttributeFilters=System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute \
            --Output="${{ env.COVERAGE_FILE }}" \
            -- test --configuration Release --no-restore --no-build --verbosity normal --filter "FullyQualifiedName!~SmokeTests"

      - name: Dotnet publish
        if: ${{ inputs.publish == true }}
        run: |
          dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --no-restore --no-build --property:PublishDir=${{ env.PUBLISH_DIR }}

      - name: Upload publish artifacts
        id: upload_artifacts
        if: ${{ inputs.publish == true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PUBLISH_ARTIFACT }}-${{ steps.nbgv.outputs.SemVer2 }}
          path: '${{ vars.AZURE_WEBAPP_PACKAGE_PATH }}'

      - name: Set artifact ID
        id: set_artifact_id
        if: ${{ inputs.publish == true }}
        run: echo "artifact_id=${{ steps.upload_artifacts.outputs.artifact-id }}" >> $GITHUB_OUTPUT

      - name: SonarQube End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        run: |
          scannerPath="$CACHE_DIR/scanner/dotnet-sonarscanner"
          "$scannerPath" end /d:sonar.token="$SONAR_TOKEN"
